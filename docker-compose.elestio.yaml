version: '3.8'

services:
  # Backend Service
  backend:
    build:
      context: .
      dockerfile: docker/dockerfiles/backend.Dockerfile
      args:
        - ENVIRONMENT=production
    container_name: unstract-backend
    restart: unless-stopped
    command: --migrate
    environment:
      - ENVIRONMENT=production
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-change-me-in-production}
      - DB_HOST=db
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me-in-production}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-change-me-in-production}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me-in-production}
      - WEB_APP_ORIGIN_URL=${WEB_APP_ORIGIN_URL:-*}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - SESSION_COOKIE_SECURE=True
      - CSRF_COOKIE_SECURE=True
    volumes:
      - prompt_studio_data:/app/prompt-studio-data
      - workflow_data:/data
      - tool_registry:/data/tool_registry
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/dockerfiles/frontend.Dockerfile
      target: production
      args:
        - NODE_ENV=production
        - REACT_APP_API_URL=${REACT_APP_API_URL:-/api/v1}
    container_name: unstract-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${REACT_APP_API_URL:-/api/v1}
    depends_on:
      - backend

  # Database
  db:
    image: postgres:15-alpine
    container_name: unstract-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-unstract}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-change-me-in-production}
      - POSTGRES_DB=${DB_NAME:-unstract}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-unstract} -d ${DB_NAME:-unstract}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: unstract-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-change-me-in-production}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-change-me-in-production}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: unstract-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me-in-production}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO
  minio:
    image: minio/minio:RELEASE.2023-03-24T21-41-23Z
    container_name: unstract-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-change-me-in-production}
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Worker
  worker:
    build:
      context: .
      dockerfile: docker/dockerfiles/backend.Dockerfile
      args:
        - ENVIRONMENT=production
    container_name: unstract-worker
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend worker --loglevel=info -Q celery,celery_api_deployments --autoscale=${WORKER_AUTOSCALE:-10,3}"
    environment:
      - ENVIRONMENT=production
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-change-me-in-production}
      - DB_HOST=db
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me-in-production}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-change-me-in-production}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me-in-production}
    volumes:
      - workflow_data:/data
      - tool_registry:/data/tool_registry
    depends_on:
      - db
      - redis
      - rabbitmq

  # Platform Service
  platform-service:
    build:
      context: .
      dockerfile: docker/dockerfiles/platform.Dockerfile
    container_name: unstract-platform-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me-in-production}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me-in-production}
    depends_on:
      - db
      - redis
      - rabbitmq

  # Prompt Service
  prompt-service:
    build:
      context: .
      dockerfile: docker/dockerfiles/prompt.Dockerfile
    container_name: unstract-prompt-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me-in-production}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me-in-production}
    depends_on:
      - db
      - redis
      - rabbitmq

  # X2Text Service
  x2text-service:
    build:
      context: .
      dockerfile: docker/dockerfiles/x2text.Dockerfile
    container_name: unstract-x2text-service
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me-in-production}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me-in-production}
    depends_on:
      - db
      - redis
      - rabbitmq

  # Tool Sidecar
  tool-sidecar:
    build:
      context: .
      dockerfile: docker/dockerfiles/tool-sidecar.Dockerfile
    container_name: unstract-tool-sidecar
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me-in-production}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me-in-production}
    depends_on:
      - db
      - redis
      - rabbitmq

  # Runner
  runner:
    build:
      context: .
      dockerfile: docker/dockerfiles/runner.Dockerfile
    container_name: unstract-runner
    restart: unless-stopped
    ports:
      - "5002:5002"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me-in-production}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me-in-production}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - db
      - redis
      - rabbitmq

  # Celery Flower (Monitoring)
  celery-flower:
    build:
      context: .
      dockerfile: docker/dockerfiles/backend.Dockerfile
      args:
        - ENVIRONMENT=production
    container_name: unstract-celery-flower
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend flower --port=5555 --basic_auth=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-change-me}"
    ports:
      - "5555:5555"
    environment:
      - ENVIRONMENT=production
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-change-me-in-production}
      - DB_HOST=db
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me-in-production}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-change-me-in-production}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me-in-production}
    depends_on:
      - rabbitmq

# Named volumes for persistent data storage
volumes:
  prompt_studio_data:
  workflow_data:
  tool_registry:
  minio_data:
  postgres_data:
  redis_data:
  rabbitmq_data:
