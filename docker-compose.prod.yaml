version: '3.8'

services:
  # Reverse Proxy (Nginx)
  reverse-proxy:
    image: nginx:alpine
    container_name: unstract-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs
      - ./letsencrypt:/etc/letsencrypt
    depends_on:
      - backend
    networks:
      - unstract-network

  # Backend Service
  backend:
    build:
      context: .
      dockerfile: docker/dockerfiles/backend.Dockerfile
      args:
        - ENVIRONMENT=production
    container_name: unstract-backend
    restart: unless-stopped
    command: --migrate
    env_file:
      - ./backend/.env
    environment:
      - ENVIRONMENT=production
    volumes:
      - prompt_studio_data:/app/prompt-studio-data
      - workflow_data:/data
      - tool_registry:/data/tool_registry
    networks:
      - unstract-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Worker
  worker:
    build:
      context: .
      dockerfile: docker/dockerfiles/backend.Dockerfile
      args:
        - ENVIRONMENT=production
    container_name: unstract-worker
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend worker --loglevel=info -Q celery,celery_api_deployments --autoscale=${WORKER_AUTOSCALE:-10,3}"
    env_file:
      - ./backend/.env
    environment:
      - ENVIRONMENT=production
    depends_on:
      - redis
      - rabbitmq
    networks:
      - unstract-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/dockerfiles/frontend.Dockerfile
      target: production
      args:
        - NODE_ENV=production
        - REACT_APP_API_URL=${REACT_APP_API_URL}
    container_name: unstract-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    volumes:
      - frontend_build:/app/build
    networks:
      - unstract-network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Database (consider using a managed database service in production)
  db:
    image: postgres:15-alpine
    container_name: unstract-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-unstract}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-change-me-in-production}
      - POSTGRES_DB=${DB_NAME:-unstract}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - unstract-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-unstract} -d ${DB_NAME:-unstract}"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Redis (consider using a managed Redis service in production)
  redis:
    image: redis:7-alpine
    container_name: unstract-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-change-me-in-production}
    volumes:
      - redis_data:/data
    networks:
      - unstract-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-change-me-in-production}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: unstract-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me-in-production}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - unstract-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

networks:
  unstract-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prompt_studio_data:
  workflow_data:
