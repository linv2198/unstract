version: '3.8'

services:
  # Reverse Proxy (Nginx)
  reverse-proxy:
    image: nginx:alpine
    container_name: unstract-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs
      - ./letsencrypt:/etc/letsencrypt
    depends_on:
      - backend
    networks:
      - unstract-network

  # Backend Service
  backend:
    image: unstract/backend:${VERSION:-latest}
    container_name: unstract-backend
    restart: unless-stopped
    command: --migrate
    env_file:
      - ./backend/.env
    environment:
      - ENVIRONMENT=production
    volumes:
      - prompt_studio_data:/app/prompt-studio-data
      - workflow_data:/data
      - ${TOOL_REGISTRY_CONFIG_SRC_PATH}:/data/tool_registry
    networks:
      - unstract-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Worker
  worker:
    image: unstract/backend:${VERSION:-latest}
    container_name: unstract-worker
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend worker --loglevel=info -Q celery,celery_api_deployments --autoscale=${WORKER_AUTOSCALE:-10,3}"
    env_file:
      - ./backend/.env
    environment:
      - ENVIRONMENT=production
    depends_on:
      - redis
      - rabbitmq
    networks:
      - unstract-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Frontend
  frontend:
    image: unstract/frontend:${VERSION:-latest}
    container_name: unstract-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${DJANGO_APP_BACKEND_URL}/api/v1
    networks:
      - unstract-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Database (consider using a managed database service in production)
  db:
    image: postgis/postgis:15-3.3-alpine
    container_name: unstract-db
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./scripts/db-setup/db_setup.sh:/docker-entrypoint-initdb.d/db_setup.sh
    networks:
      - unstract-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Redis (consider using a managed Redis service in production)
  redis:
    image: redis:7.2-alpine
    container_name: unstract-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - unstract-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: unstract-rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-generate-strong-password}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - unstract-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

networks:
  unstract-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prompt_studio_data:
  workflow_data:
