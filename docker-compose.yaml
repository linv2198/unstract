version: '3.8'

services:
  # Backend service
  backend:
    image: unstract/backend:${VERSION:-latest}
    container_name: unstract-backend
    restart: unless-stopped
    command: --migrate
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-change-me-in-production}
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me}
      - WEB_APP_ORIGIN_URL=${WEB_APP_ORIGIN_URL:-*}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - SESSION_COOKIE_SECURE=True
      - CSRF_COOKIE_SECURE=True
      - SECURE_PROXY_SSL_HEADER=HTTP_X_FORWARDED_PROTO,https
      - TOOL_REGISTRY_CONFIG_SRC_PATH=/data/tool_registry
    volumes:
      - prompt_studio_data:/app/prompt-studio-data
      - workflow_data:/data
      - tool_registry:/data/tool_registry
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      platform-service:
        condition: service_started
      prompt-service:
        condition: service_started
      x2text-service:
        condition: service_started

  # Database
  db:
    image: postgres:15-alpine
    container_name: unstract-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-unstract}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-change-me}
      - POSTGRES_DB=${DB_NAME:-unstract}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-unstract} -d ${DB_NAME:-unstract}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: unstract-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: unstract-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO
  minio:
    image: minio/minio:latest
    container_name: unstract-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Celery worker
  worker:
    image: unstract/backend:${VERSION:-latest}
    container_name: unstract-worker
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend worker --loglevel=info -Q celery,celery_api_deployments --autoscale=${WORKER_AUTOSCALE:-4,2}"
    environment:
      - ENVIRONMENT=production
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-change-me-in-production}
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me}
      - TOOL_REGISTRY_CONFIG_SRC_PATH=/data/tool_registry
    volumes:
      - workflow_data:/data
      - tool_registry:/data/tool_registry
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy


  # Celery worker for managing logs and periodic tasks
  worker-logging:
    image: unstract/backend:${VERSION:-latest}
    container_name: unstract-worker-logging
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend worker --loglevel=info -Q celery_periodic_logs,celery_log_task_queue --autoscale=${WORKER_LOGGING_AUTOSCALE:-2,1}"
    environment:
      - ENVIRONMENT=production
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-change-me-in-production}
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me}
      - TOOL_REGISTRY_CONFIG_SRC_PATH=/data/tool_registry
    volumes:
      - workflow_data:/data
      - tool_registry:/data/tool_registry
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy

  # Celery worker for handling file processing tasks
  worker-file-processing:
    image: unstract/backend:${VERSION:-latest}
    container_name: unstract-worker-file-processing
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend.workers.file_processing worker --loglevel=info -Q file_processing,api_file_processing --autoscale=${WORKER_FILE_PROCESSING_AUTOSCALE:-4,2}"
    environment:
      - ENVIRONMENT=production
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-change-me-in-production}
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me}
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - TOOL_REGISTRY_CONFIG_SRC_PATH=/data/tool_registry
    volumes:
      - workflow_data:/data
      - tool_registry:/data/tool_registry
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      minio:
        condition: service_healthy

  # Worker for file processing callbacks
  worker-file-processing-callback:
    image: unstract/backend:${VERSION:-latest}
    container_name: unstract-worker-file-processing-callback
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend.workers.file_processing_callback worker --loglevel=info -Q file_processing_callback,api_file_processing_callback --autoscale=${WORKER_FILE_PROCESSING_CALLBACK_AUTOSCALE:-4,2}"
    environment:
      - ENVIRONMENT=production
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-change-me-in-production}
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me}
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - TOOL_REGISTRY_CONFIG_SRC_PATH=/data/tool_registry
    volumes:
      - workflow_data:/data
      - tool_registry:/data/tool_registry
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      minio:
        condition: service_healthy

  # Celery Flower (Monitoring)
  celery-flower:
    image: unstract/backend:${VERSION:-latest}
    container_name: unstract-celery-flower
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend flower --port=5555 --purge_offline_workers=5 --basic_auth=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-change-me}"
    environment:
      - ENVIRONMENT=production
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-change-me-in-production}
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me}
      - CELERY_BROKER_URL=amqp://${RABBITMQ_DEFAULT_USER:-unstract}:${RABBITMQ_DEFAULT_PASS:-change-me}@${RABBITMQ_HOST:-rabbitmq}:5672//
    ports:
      - "5555:5555"
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat (Scheduler)
  celery-beat:
    image: unstract/backend:${VERSION:-latest}
    container_name: unstract-celery-beat
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend beat --scheduler django_celery_beat.schedulers:DatabaseScheduler -l INFO"
    environment:
      - ENVIRONMENT=production
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-change-me-in-production}
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me}
      - CELERY_BROKER_URL=amqp://${RABBITMQ_DEFAULT_USER:-unstract}:${RABBITMQ_DEFAULT_PASS:-change-me}@${RABBITMQ_HOST:-rabbitmq}:5672//
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - workflow_data:/data

  # Frontend React app
  frontend:
    image: unstract/frontend:${VERSION:-latest}
    container_name: unstract-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${WEB_APP_ORIGIN_URL:-http://localhost:8000}/api/v1
      - REACT_APP_WS_URL=ws://${HOSTNAME:-localhost}:8000/ws
      - GENERATE_SOURCEMAP=false
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      backend:
        condition: service_healthy

  # Platform Service
  platform-service:
    image: unstract/platform-service:${VERSION:-latest}
    container_name: unstract-platform-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me}
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Prompt Service
  prompt-service:
    image: unstract/prompt-service:${VERSION:-latest}
    container_name: unstract-prompt-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me}
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # X2Text Service
  x2text-service:
    image: unstract/x2text-service:${VERSION:-latest}
    container_name: unstract-x2text-service
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me}
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Tool Sidecar
  tool-sidecar:
    image: unstract/tool-sidecar:${VERSION:-latest}
    container_name: unstract-tool-sidecar
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me}
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Runner
  runner:
    image: unstract/runner:${VERSION:-latest}
    container_name: unstract-runner
    restart: unless-stopped
    ports:
      - 5002:5002
    environment:
      - NODE_ENV=production
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-unstract}
      - DB_PASSWORD=${DB_PASSWORD:-change-me}
      - DB_NAME=${DB_NAME:-unstract}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-unstract}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-change-me}
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./workflow_data:/data
      # Docker socket bind mount to spawn tool containers
      - /var/run/docker.sock:/var/run/docker.sock

# Named volumes for persistent data storage
volumes:
  # Persistent storage for prompt studio data
  prompt_studio_data:
    driver: local
  
  # Persistent storage for workflow data
  workflow_data:
    driver: local
  
  # Persistent storage for tool registry
  tool_registry:
    driver: local
  
  # Persistent storage for MinIO (S3-compatible object storage)
  minio_data:
    driver: local
  
  # Persistent storage for PostgreSQL database
  postgres_data:
    driver: local
  
  # Persistent storage for Redis
  redis_data:
    driver: local
  
  # Persistent storage for RabbitMQ
  rabbitmq_data:
    driver: local

networks:
  default:
    # NOTE:
    # Any changes need to be reflected in proxy service too.
    name: unstract-network
